pipeline {
    agent any
    environment {
        IMAGE_NAME = "ahmed0130/todo-app:2.0-snapshot-${BUILD_NUMBER}"
    }

    stages {

        stage('prep env') {
            when {
                expression { return env.BUILD_NUMBER == '1' }
            }
            steps {
                script {
                    sh 'virtualenv venv'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo "test the application......"
                    sh '''#!/bin/bash
                        source venv/bin/activate &&
                        pip install -r requirements.txt &&
                        python manage.py migrate &&
                        pytest
                    '''
                }
           }
        }


        stage('Build image') {
            steps {
                script {
                    echo "build the app image "

                    withCredentials([usernamePassword(credentialsId: 'dockerhub',
                            usernameVariable: 'USERNAME', passwordVariable: 'PASS')]) {
                        sh "docker build -t $IMAGE_NAME ."
                        sh 'echo $PASS | docker login -u $USERNAME --password-stdin'
                        sh "docker push $IMAGE_NAME"
                    }
                }
            }
        }

        stage('provision ec2-server') {
            environment {
            AWS_ACCESS_KEY_ID = credentials('aws_access_key')
            AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
                }
            steps {
                script {
                                       
                    def terraformOutput = sh(script: "terraform init && terraform apply -auto-approve -no-color", returnStdout: true).trim()
                   
                    def publicIp = terraformOutput =~ /public_ip\s*=\s*"([^"]+)"/
                    if (publicIp) {
                        
                        env.PUBLIC_IP = publicIp[0][1]
                    } else {
                        error "Failed to extract public IP address from Terraform output"
                    }
                }
            }
        }

        stage('Deploy to aws') {
            steps {
                script {
                    echo "deploying the application to ec2 instance............"
                    def dockercmd = "docker run -d -p 8000:8000  ${IMAGE_NAME}"
                    sshagent(['store-server-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@${PUBLIC_IP} ${dockercmd}"
                    }
                }
            }
        }
    }
}
