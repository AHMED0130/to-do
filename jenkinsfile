pipeline {
    agent any
    environment {
        IMAGE_NAME = "ahmed0130/todo-app:2.0-snapshot-${BUILD_NUMBER}"
    }

    stages {

        stage('prep env') {
            when {
                expression { return env.BUILD_NUMBER == '1' }
            }
            steps {
                script {
                    sh 'virtualenv venv'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo "test the application....."
                    sh """
                        . /var/jenkins_home/workspace/${JOB_NAME}/venv/bin/activate
                        pip install -r requirements.txt
                        python manage.py migrate 
                        pytest
                    """
                }
           }
        }


        stage('Build image') {
            steps {
                script {
                    echo "build the app image "

                    withCredentials([usernamePassword(credentialsId: 'dockerhub',
                            usernameVariable: 'USERNAME', passwordVariable: 'PASS')]) {
                        sh "docker build -t $IMAGE_NAME ."
                        sh 'echo $PASS | docker login -u $USERNAME --password-stdin'
                        sh "docker push $IMAGE_NAME"
                    }
                }
            }
        }

        stage('provision ec2-server') {
            environment {
            AWS_ACCESS_KEY_ID = credentials('aws_access_key')
            AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            TF_VAR_env_prefix = "test"
                }
            steps {
                script {
                    dir('terraform') {                   
                        sh "terraform init"
                        sh "terraform apply -auto-approve"
                        EC2_PUBLIC_IP = sh(
                            script: "terraform ouput public_ip"
                            returnStdout : true             
                        ).trim()   
                    }
                }
            }
        }
        
        stage('Deploy to aws') {
            steps {
                script {
                    echo "waiting for initalizing process"
                    sleep(time: 90 ,unit: "SECONDS")

                    echo "deploying the application to ec2 instance............"
                    def dockercmd = "docker run -d -p 8000:8000  ${IMAGE_NAME}"
                    sshagent(['store-server-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@${EC2_PUBLIC_IP} ${dockercmd}"
                    }
                }
            }
        }
    }
}
